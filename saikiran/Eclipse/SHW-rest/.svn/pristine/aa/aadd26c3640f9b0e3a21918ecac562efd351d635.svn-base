package com.prokarma.sourcerer.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import com.prokarma.sourcerer.dao.PersonalTraitsDao;
import com.prokarma.sourcerer.dto.PersonalTrait;
@Repository
public class PersonalTraitsDaoImpl implements PersonalTraitsDao {

	private static org.apache.log4j.Logger logger = Logger.getLogger(PersonalTraitsDaoImpl.class);
	final static org.apache.log4j.Logger FileLogger = Logger.getLogger("logger.file");
	@Autowired
	NamedParameterJdbcTemplate namedParameterJdbcTemplate;
	
	String get_PersonalTraits_sql="select * from PERSONAL_TRAITS";
	String add_PersonalTraits_sql="insert into PERSONAL_TRAITS values(PERSONAL_TRAITS_ID.nextval,:trait_name)";
	String edit_PersonalTraits_sql="update PERSONAL_TRAITS set PERSONAL_TRAITS=:trait_name where TRAITID=:trait_id";
	String delete_PersonalTraits_sql="delete from PERSONAL_TRAITS where TRAITID=:trait_id ";
	String delete_Personaltraits_previous_entries_sql = "delete from PERSONAL_TRAITS_RATING where skillid = :trait_id";
	

	public List<PersonalTrait> getPersonalTraits() {
		
		return namedParameterJdbcTemplate.query(get_PersonalTraits_sql, new RowMapper<PersonalTrait>() {

			
			public PersonalTrait mapRow(ResultSet resultset, int index) throws SQLException {
				PersonalTrait personalTrait= new PersonalTrait();
				personalTrait.setTraitId(resultset.getInt(1));
				personalTrait.setPersonalTrait(resultset.getString(2));
				return personalTrait;
			}
		});
	}

	
	public boolean addPersonalTrait(PersonalTrait personalTrait) {
		try {
		final MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("trait_name", personalTrait.getPersonalTrait());
		namedParameterJdbcTemplate.update(add_PersonalTraits_sql, params);
		return true;
		}catch(Exception e) {
			logger.debug("\"adding personal trait failed");
			FileLogger.error("adding personal trait failed");
			FileLogger.error(e.getMessage());
			return false;
		}
	}

	
	public boolean editPersonalTrait(PersonalTrait personalTrait) {
		try {
		final MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("trait_name", personalTrait.getPersonalTrait());
		params.addValue("trait_id", personalTrait.getTraitId());
		namedParameterJdbcTemplate.update(edit_PersonalTraits_sql, params);
		return true;
	}catch(Exception e) {
		logger.debug("updating personal trait failed");
		FileLogger.error("updating personal trait failed");
		FileLogger.error(e.getMessage());
		return false;
	}
	}

	
	public boolean deletePersonalTrait(PersonalTrait personalTrait) {
		try {
		final MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("trait_id", personalTrait.getTraitId());
		namedParameterJdbcTemplate.update(delete_PersonalTraits_sql, params);
		namedParameterJdbcTemplate.update(delete_Personaltraits_previous_entries_sql, params);
		return true;
		}catch(Exception e) {
			logger.debug("updating personal trait failed");
			FileLogger.error("deleting personal trait failed");
			FileLogger.error(e.getMessage());
			return false;
		}

	}

}
